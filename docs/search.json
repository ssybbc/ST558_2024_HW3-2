[
  {
    "objectID": "Homework 3.html",
    "href": "Homework 3.html",
    "title": "Homework 3",
    "section": "",
    "text": "First load the work environment of homework 2 from online\n\nsetwd (\"C:\\\\NCSU\\\\Statistics\\\\ST558\\\\2024\")\nload (\"hw2_list.rda\")\n\nmybplist &lt;- bp_list\n\n\nTask 1: Control Flow Practice\nNow create a new column called “status” in each data frame in the list. Note character () could be used as a function to make a character vector, just like the argument data.frame () does.\n\nmybplist[[1]]$status &lt;- character (20)\nmybplist[[2]]$status &lt;- character (10)\n\nNow check the new list to see if the status columns were added to each of the dataframe。\n\nstr (mybplist)\n\nList of 2\n $ treatment:'data.frame':  20 obs. of  6 variables:\n  ..$ patient: chr [1:20] \"Subject_1\" \"Subject_2\" \"Subject_3\" \"Subject_4\" ...\n  ..$ pre_bp : num [1:20] 120 151 125 126 115 132 132 129 134 139 ...\n  ..$ post_bp: num [1:20] 127 145 135 122 115 122 123 126 126 129 ...\n  ..$ diff_bp: num [1:20] -7 6 -10 4 0 10 9 3 8 10 ...\n  ..$ normal : logi [1:20] FALSE FALSE FALSE FALSE TRUE FALSE ...\n  ..$ status : chr [1:20] \"\" \"\" \"\" \"\" ...\n $ placebo  :'data.frame':  10 obs. of  6 variables:\n  ..$ patient: chr [1:10] \"Subject_1\" \"Subject_2\" \"Subject_3\" \"Subject_4\" ...\n  ..$ pre_bp : num [1:10] 138 135 147 117 152 134 114 121 131 130\n  ..$ post_bp: num [1:10] 105 136 123 130 134 143 135 139 120 124\n  ..$ diff_bp: num [1:10] 33 -1 24 -13 18 -9 -21 -18 11 6\n  ..$ normal : logi [1:10] TRUE FALSE FALSE FALSE FALSE FALSE ...\n  ..$ status : chr [1:10] \"\" \"\" \"\" \"\" ...\n\n\nOk. Then we are ready to go.\nNext create a for loop and use if/then/else logic to create the status column values. We could always use for (i in 1:n) where n is the actual number of rows in the dataframe. But to be more universally applicable, try for (i in 1: dim(mybplist$treatment)[1])\n\nfor (i in 1 : dim (mybplist$treatment)[1])\n  if (mybplist$treatment$post_bp[i] &lt;= 120) {\n    mybplist$treatment$status [i]= \"optimal\"\n  } else if (mybplist$treatment$post_bp[i] &lt;= 130) {\n    mybplist$treatment$status [i]= \"borderline\"\n  } else if (mybplist$treatment$post_bp[i] &gt; 130){\n    mybplist$treatment$status [i]= \"high\"\n  }\n\nThen check if the status has been added correctly.\n\nstr (mybplist$treatment)\n\n'data.frame':   20 obs. of  6 variables:\n $ patient: chr  \"Subject_1\" \"Subject_2\" \"Subject_3\" \"Subject_4\" ...\n $ pre_bp : num  120 151 125 126 115 132 132 129 134 139 ...\n $ post_bp: num  127 145 135 122 115 122 123 126 126 129 ...\n $ diff_bp: num  -7 6 -10 4 0 10 9 3 8 10 ...\n $ normal : logi  FALSE FALSE FALSE FALSE TRUE FALSE ...\n $ status : chr  \"borderline\" \"high\" \"high\" \"borderline\" ...\n\n\nIt worked! Now apply this function to the placebo data frame as well.\n\nfor (i in 1 : dim (mybplist$placebo)[1])\n  if (mybplist$placebo$post_bp[i] &lt;= 120) {\n    mybplist$placebo$status [i]= \"optimal\"\n  } else if (mybplist$placebo$post_bp[i] &lt;= 130) {\n    mybplist$placebo$status [i]= \"borderline\"\n  } else if (mybplist$placebo$post_bp[i] &gt; 130){\n    mybplist$placebo$status [i]= \"high\"\n  }\nstr (mybplist$placebo)\n\n'data.frame':   10 obs. of  6 variables:\n $ patient: chr  \"Subject_1\" \"Subject_2\" \"Subject_3\" \"Subject_4\" ...\n $ pre_bp : num  138 135 147 117 152 134 114 121 131 130\n $ post_bp: num  105 136 123 130 134 143 135 139 120 124\n $ diff_bp: num  33 -1 24 -13 18 -9 -21 -18 11 6\n $ normal : logi  TRUE FALSE FALSE FALSE FALSE FALSE ...\n $ status : chr  \"optimal\" \"high\" \"borderline\" \"borderline\" ...\n\n\nThen check the list that comprises those two data frame as elements to make sure the data manipulations were made within the list.\n\nstr (mybplist)\n\nList of 2\n $ treatment:'data.frame':  20 obs. of  6 variables:\n  ..$ patient: chr [1:20] \"Subject_1\" \"Subject_2\" \"Subject_3\" \"Subject_4\" ...\n  ..$ pre_bp : num [1:20] 120 151 125 126 115 132 132 129 134 139 ...\n  ..$ post_bp: num [1:20] 127 145 135 122 115 122 123 126 126 129 ...\n  ..$ diff_bp: num [1:20] -7 6 -10 4 0 10 9 3 8 10 ...\n  ..$ normal : logi [1:20] FALSE FALSE FALSE FALSE TRUE FALSE ...\n  ..$ status : chr [1:20] \"borderline\" \"high\" \"high\" \"borderline\" ...\n $ placebo  :'data.frame':  10 obs. of  6 variables:\n  ..$ patient: chr [1:10] \"Subject_1\" \"Subject_2\" \"Subject_3\" \"Subject_4\" ...\n  ..$ pre_bp : num [1:10] 138 135 147 117 152 134 114 121 131 130\n  ..$ post_bp: num [1:10] 105 136 123 130 134 143 135 139 120 124\n  ..$ diff_bp: num [1:10] 33 -1 24 -13 18 -9 -21 -18 11 6\n  ..$ normal : logi [1:10] TRUE FALSE FALSE FALSE FALSE FALSE ...\n  ..$ status : chr [1:10] \"optimal\" \"high\" \"borderline\" \"borderline\" ...\n\n\n\n\nTask 2: Function Writing\nWriting a function is one of the most exciting part in R. It enables custom-input, which is extremely useful in making an R shiny app. We wanted to write a function that\n\nTakes in a list with two data frames in it (just as the list we played with in the Task 1) as am argument, give no default value in it.\nTakes in an R function with the default value set to “mean”. This is essentially enabling user to input what stats they wanted to summarize.\nThis function should find the stats of interest for the pre, post, and diff columns of both data frames.\nThe six values should then be retured as a named list with meaningful names.\nIt looks like the last requirement is more challanging. Try make a function that enables the requirement 1-3 first.\n\n\nsummarize &lt;- function (list, summarywhich = \"mean\") {\n  return (c (get(summarywhich)(list$treatment$pre_bp),\n             get(summarywhich)(list$treatment$post_bp),\n             get(summarywhich)(list$treatment$diff_bp),\n             get(summarywhich)(list$placebo$pre_bp),\n             get(summarywhich)(list$placebo$post_bp),\n             get(summarywhich)(list$placebo$diff_bp)))\n}\n\nLet’s give it try using the mybplist.\n\nsummarize (mybplist)\n\n[1] 131.60 125.95   5.65 131.90 128.90   3.00\n\nsummarize (mybplist, summarywhich = \"sd\")\n\n[1]  8.702087  8.888046 10.854419 12.242458 11.179843 18.475209\n\n\nThe problem is the elements don’t have a name. In order to do that, we could build a second function to get at custom input. This takes a while for me to think. Initially I thought two functions are required, and then later I found not everything need to be returned. Here we go.\n\nsummarize &lt;- function (list, summarywhich = \"mean\") {\n  stats &lt;- c (get(summarywhich)(list$treatment$pre_bp),\n             get(summarywhich)(list$treatment$post_bp),\n             get(summarywhich)(list$treatment$diff_bp),\n             get(summarywhich)(list$placebo$pre_bp),\n             get(summarywhich)(list$placebo$post_bp),\n             get(summarywhich)(list$placebo$diff_bp))\n  names (stats) &lt;- c (paste (summarywhich, \"prebp\", \"treatment\"),\n                       paste (summarywhich, \"postbp\", \"treatment\"),\n                       paste (summarywhich, \"diffbp\", \"treatment\"),\n                       paste (summarywhich, \"prebp\", \"placebo\"),\n                       paste (summarywhich, \"postbp\", \"placebo\"),\n                       paste (summarywhich, \"diffbp\", \"placebo\"))\n  return (as.list (stats))\n  \n}\n\nApply this function to generate mean (without specifying), var, sd, min and max\n\nsummarize (mybplist)\n\n$`mean prebp treatment`\n[1] 131.6\n\n$`mean postbp treatment`\n[1] 125.95\n\n$`mean diffbp treatment`\n[1] 5.65\n\n$`mean prebp placebo`\n[1] 131.9\n\n$`mean postbp placebo`\n[1] 128.9\n\n$`mean diffbp placebo`\n[1] 3\n\nsummarize (mybplist, \"var\")\n\n$`var prebp treatment`\n[1] 75.72632\n\n$`var postbp treatment`\n[1] 78.99737\n\n$`var diffbp treatment`\n[1] 117.8184\n\n$`var prebp placebo`\n[1] 149.8778\n\n$`var postbp placebo`\n[1] 124.9889\n\n$`var diffbp placebo`\n[1] 341.3333\n\nsummarize (mybplist, \"sd\")\n\n$`sd prebp treatment`\n[1] 8.702087\n\n$`sd postbp treatment`\n[1] 8.888046\n\n$`sd diffbp treatment`\n[1] 10.85442\n\n$`sd prebp placebo`\n[1] 12.24246\n\n$`sd postbp placebo`\n[1] 11.17984\n\n$`sd diffbp placebo`\n[1] 18.47521\n\nsummarize (mybplist, \"min\")\n\n$`min prebp treatment`\n[1] 115\n\n$`min postbp treatment`\n[1] 114\n\n$`min diffbp treatment`\n[1] -24\n\n$`min prebp placebo`\n[1] 114\n\n$`min postbp placebo`\n[1] 105\n\n$`min diffbp placebo`\n[1] -21\n\nsummarize (mybplist, \"max\")\n\n$`max prebp treatment`\n[1] 151\n\n$`max postbp treatment`\n[1] 146\n\n$`max diffbp treatment`\n[1] 21\n\n$`max prebp placebo`\n[1] 152\n\n$`max postbp placebo`\n[1] 143\n\n$`max diffbp placebo`\n[1] 33"
  }
]